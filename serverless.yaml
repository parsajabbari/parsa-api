service: parsa-api
frameworkVersion: 3.33.0
configValidationMode: error
package:
  individually: false

provider:
  name: aws
  architecture: arm64
  memorySize: 128
  runtime: nodejs20.x
  stage: main
  region: us-east-1

plugins:
  - serverless-plugin-typescript
  - serverless-offline

functions:
  function1:
    handler: index.handler
    events:
      - httpApi:
          path: /index
          method: get
      # - schedule:
      #     rate: rate(1 minute)
      #     inputTransformer: # doesn't work on serverless offline, just gets ignored and you get the stock event instead
      #       inputPathsMap:
      #         event: "$"
      #       inputTemplate: '{"default": <event>, "_karmaArgs": {"priority": 1}}'
  function2:
    handler: foo.handler
    events:
      - httpApi:
          path: /foo
          method: get

custom:
  serverless-offline:
    lambdaPort: 3002
    httpPort: 3003
# cloudwatch's stack drift detection tool is a good way to check if you have
# manually modified thigns like cron expressions since the last deploy, instaed
# of manually comparing serverless file with AWS portal.

# confirmed that if you delete a resource in serverless, then deploy, it will
# delete it in aws as well! so stack drift can only happen when you manually
# change a config like a cron expression. this also means that if you change
# the name of your service entirely, like form karma-api to foobar-api, the
# stack drift tool won't save you; because you are creating a new stack entirely
#, not modifying an existing service. if you change the name of your service,
# must delete the old stack manually. but once you have a service and are just
# modifying it, serverless is indeed a state function, and the stack drift tool
# will just show you if you changed anything from the state.

# AWS default is not necessarily same as serverless default! so you can't just look
# at what AWS says and just assume that if i don't mess with it, that's what i will
# get... in fact, difference can be huge... default lambda is 128 MB ram, but
# serverless does 1GB if you don't specify! you have to effectively treat
# serverless as a totally different thing from AWS... that has its own sensibilities,
# rather than just a convenient way of writing AWS stack, that is unopioninated
# https://github.com/serverless/serverless/issues/11529

# could've sworn that karmacheck repo isn't using nodemon but it will auto
# build anytime i make a change, so what's going on? maybe don't need nodemon

# figure out whether specifying engines in package with a specific version of node causes
# aws to use the same version or not? will it just error out during build?
# if it works anyway but diffrent version logged out, rpoves that aws just ignores it
# => what's happening is that it is either you or your build system (e.g. github actions)
# that actually uses the package.json to install dependencies so uses the engine version.
# all aws is receiving is a bundled zip file, and while there is a package.json
# in there, AWS isn't touching it. it is just receiving a bundle and then
# running it its own runtime. AWS doesn't do any additional validation on your
# package.json at that point.

# see if build system is smart enough to only import individual objects from
# a library when i do 'import {foo} from bar', or does it import the entire library? => seems that it imports
# the entire library if it is a normal dependency, even if you aren't using
# it at all (and even if you are using it, but only importing specific htings)
# so importing {foo, bar} from baz is just a way of minimizing namespace
# collisions, but has no impact on bundle size

# by default, serverless makes one zip file
# for your entire codebase. all handlers will be in it.
# you can make set package.individually = true at the service level
# to force serverless to make individual zip files
# for each function, but this makes deploy take longer
# AND, most importantly, by default, if you don't then
# specify any package patterns at the function level
# the entire package is included anyway. so package individually
# with no package patterns just makes 1000 identical zip files

